<?php
/**
 * File: /sisme-games-editor/includes/tools/emoji-helper.php
 * Helper pour la gestion des √©mojis compatibles WordPress/HTML
 * 
 * UTILISATION:
 * - Listes organis√©es pour formulaires
 * - Validation d'√©mojis
 * - G√©n√©ration de s√©lecteurs
 */

if (!defined('ABSPATH')) {
    exit;
}

class Sisme_Emoji_Helper {
    
    /**
     * üéÆ √âmojis Gaming & Jeux Vid√©o
     */
    const GAMING_EMOJIS = array(
        'üéÆ' => 'Manette de jeu',
        'üïπÔ∏è' => 'Joystick r√©tro',
        'üéØ' => 'Cible/Objectif',
        'üèÜ' => 'Troph√©e',
        'ü•á' => 'M√©daille d\'or',
        'ü•à' => 'M√©daille d\'argent',
        'ü•â' => 'M√©daille de bronze',
        'üëë' => 'Couronne',
        'üèÖ' => 'M√©daille sportive'
    );
    
    /**
     * üåü √âmojis de Mise en Avant
     */
    const FEATURED_EMOJIS = array(
        '‚≠ê' => '√âtoile classique',
        'üåü' => '√âtoile brillante',
        '‚ú®' => '√âtincelles',
        'üí´' => '√âtoile filante',
        '‚ö°' => '√âclair',
        'üî•' => 'Feu/Tendance',
        'üíé' => 'Diamant/Premium',
        'üíç' => 'Bijou/Pr√©cieux',
        'üëë' => 'Royal/VIP',
        'üèÜ' => 'Champion'
    );
    
    /**
     * üÜï √âmojis Nouveaut√©s & Actualit√©s
     */
    const NEWS_EMOJIS = array(
        'üÜï' => 'Nouveau',
        'üî•' => 'Hot/Tendance',
        'üì¢' => 'Annonce',
        'üì£' => 'M√©gaphone',
        'üö®' => 'Urgence/Alerte',
        '‚ö°' => 'Flash/Rapide',
        'üí•' => 'Explosion/Impact',
        'üå™Ô∏è' => 'Tourbillon/Dynamique'
    );
    
    /**
     * üé® √âmojis par Genres de Jeux
     */
    const GENRE_EMOJIS = array(
        // Action & Aventure
        '‚öîÔ∏è' => 'Action & Combat',
        'üèπ' => 'Archer/RPG',
        'üõ°Ô∏è' => 'D√©fense/Strat√©gie',
        'üó°Ô∏è' => 'Action/Aventure',
        'üßô' => 'Fantasy/Magie',
        'üê≤' => 'Fantasy/Aventure',
        
        // Sci-Fi & Space
        'üöÄ' => 'Space/Sci-Fi',
        'üõ∏' => 'Sci-Fi/Alien',
        'üëΩ' => 'Extraterrestre',
        'üåå' => 'Galaxie',
        
        // Puzzle & R√©flexion
        'üß©' => 'Puzzle/R√©flexion',
        'üé≤' => 'Jeux de hasard',
        'üß†' => 'R√©flexion/Mental',
        'üîç' => 'Investigation',
        
        // Cartes & Casino
        '‚ô†Ô∏è' => 'Cartes Pique',
        '‚ô•Ô∏è' => 'Cartes C≈ìur',
        '‚ô¶Ô∏è' => 'Cartes Carreau',
        '‚ô£Ô∏è' => 'Cartes Tr√®fle',
        
        // Simulation & Gestion
        'üèóÔ∏è' => 'Construction',
        'üè≠' => 'Industrie',
        'üöú' => 'Farming',
        'üå±' => 'Jardinage',
        'üèòÔ∏è' => 'City Builder',
        
        // Transport & Course
        'üöó' => 'Simulation auto',
        '‚úàÔ∏è' => 'Simulation vol',
        'üö¢' => 'Simulation navale',
        'üöÇ' => 'Trains',
        'üèéÔ∏è' => 'Course auto',
        'üèçÔ∏è' => 'Moto',
        
        // Sports
        '‚öΩ' => 'Football',
        'üèÄ' => 'Basketball',
        'üèà' => 'Football US',
        'üéæ' => 'Tennis',
        
        // Horreur & Thriller
        'üëª' => 'Fant√¥me',
        'üéÉ' => 'Halloween',
        'üßü' => 'Zombie',
        'üßõ' => 'Vampire',
        'üï∑Ô∏è' => 'Araign√©e',
        'ü¶á' => 'Chauve-souris',
        'üíÄ' => 'Cr√¢ne'
    );
    
    /**
     * üì± √âmojis d'Interface & Navigation
     */
    const INTERFACE_EMOJIS = array(
        'üìÇ' => 'Cat√©gorie',
        'üìÅ' => 'Dossier ouvert',
        'üìã' => 'Liste',
        'üìä' => 'Statistiques',
        'üìà' => 'Tendances',
        'üîñ' => 'Marque-page',
        'üè∑Ô∏è' => '√âtiquette',
        'üìå' => '√âpingl√©',
        'üìç' => 'Localisation',
        'üëÜ' => 'Cliquer',
        'üëÄ' => 'Voir/Regarder',
        '‚ù§Ô∏è' => 'J\'aime',
        'üíñ' => 'Coup de c≈ìur',
        'üîó' => 'Lien',
        'üí¨' => 'Commentaire'
    );
    
    /**
     * üéâ √âmojis √âv√©nements & C√©l√©brations
     */
    const EVENT_EMOJIS = array(
        'üéÑ' => 'No√´l',
        'üéÉ' => 'Halloween',
        'üéÜ' => 'C√©l√©bration',
        'üéä' => 'F√™te',
        'üéà' => 'Anniversaire',
        'üéÇ' => 'G√¢teau d\'anniversaire',
        'üåÖ' => 'Nouveau d√©but',
        'üåá' => 'Fin de journ√©e'
    );
    
    /**
     * Obtenir tous les √©mojis par cat√©gorie
     * 
     * @return array Tableau associatif [cat√©gorie => √©mojis]
     */
    public static function get_all_categories() {
        return array(
            'gaming' => array(
                Sisme_Utils_Games::KEY_NAME => 'üéÆ Gaming & Jeux Vid√©o',
                'emojis' => self::GAMING_EMOJIS
            ),
            'featured' => array(
                Sisme_Utils_Games::KEY_NAME => 'üåü Mise en Avant',
                'emojis' => self::FEATURED_EMOJIS
            ),
            'news' => array(
                Sisme_Utils_Games::KEY_NAME => 'üÜï Nouveaut√©s & Actualit√©s',
                'emojis' => self::NEWS_EMOJIS
            ),
            Sisme_Utils_Games::KEY_GENRES => array(
                Sisme_Utils_Games::KEY_NAME => 'üé® Genres de Jeux',
                'emojis' => self::GENRE_EMOJIS
            ),
            'interface' => array(
                Sisme_Utils_Games::KEY_NAME => 'üì± Interface & Navigation',
                'emojis' => self::INTERFACE_EMOJIS
            ),
            'events' => array(
                Sisme_Utils_Games::KEY_NAME => 'üéâ √âv√©nements & C√©l√©brations',
                'emojis' => self::EVENT_EMOJIS
            )
        );
    }
    
    /**
     * Obtenir tous les √©mojis (liste plate)
     * 
     * @return array [emoji => description]
     */
    public static function get_all_emojis() {
        return array_merge(
            self::GAMING_EMOJIS,
            self::FEATURED_EMOJIS,
            self::NEWS_EMOJIS,
            self::GENRE_EMOJIS,
            self::INTERFACE_EMOJIS,
            self::EVENT_EMOJIS
        );
    }
    
    /**
     * Obtenir les √©mojis d'une cat√©gorie sp√©cifique
     * 
     * @param string $category Nom de la cat√©gorie
     * @return array|false √âmojis de la cat√©gorie ou false
     */
    public static function get_category_emojis($category) {
        $categories = self::get_all_categories();
        return isset($categories[$category]) ? $categories[$category]['emojis'] : false;
    }
    
    /**
     * G√©n√©rer un s√©lecteur HTML pour formulaire
     * 
     * @param string $name Nom du champ
     * @param string $selected Valeur s√©lectionn√©e
     * @param array $options Options suppl√©mentaires
     * @return string HTML du select
     */
    public static function render_emoji_selector($name, $selected = '', $options = array()) {
        $defaults = array(
            Sisme_Utils_Games::KEY_ID => $name,
            'class' => 'sisme-emoji-selector',
            'required' => false,
            'categories' => array(), // Vide = toutes les cat√©gories
            'include_none' => true,
            'none_text' => 'Aucun √©moji'
        );
        
        $options = array_merge($defaults, $options);
        
        // D√©terminer les cat√©gories √† afficher
        if (empty($options['categories'])) {
            $categories = self::get_all_categories();
        } else {
            $all_categories = self::get_all_categories();
            $categories = array();
            foreach ($options['categories'] as $cat) {
                if (isset($all_categories[$cat])) {
                    $categories[$cat] = $all_categories[$cat];
                }
            }
        }
        
        $output = '<select name="' . esc_attr($name) . '" id="' . esc_attr($options['id']) . '" class="' . esc_attr($options['class']) . '"';
        if ($options['required']) {
            $output .= ' required';
        }
        $output .= '>';
        
        // Option "aucun" si demand√©e
        if ($options['include_none']) {
            $output .= '<option value=""' . selected('', $selected, false) . '>' . esc_html($options['none_text']) . '</option>';
        }
        
        // Groupes par cat√©gorie
        foreach ($categories as $cat_key => $category) {
            $output .= '<optgroup label="' . esc_attr($category[Sisme_Utils_Games::KEY_NAME]) . '">';
            
            foreach ($category['emojis'] as $emoji => $description) {
                $output .= '<option value="' . esc_attr($emoji) . '"' . selected($emoji, $selected, false) . '>';
                $output .= $emoji . ' ' . esc_html($description);
                $output .= '</option>';
            }
            
            $output .= '</optgroup>';
        }
        
        $output .= '</select>';
        
        return $output;
    }
    
    /**
     * G√©n√©rer un s√©lecteur avec pr√©visualisation
     * 
     * @param string $name Nom du champ
     * @param string $selected Valeur s√©lectionn√©e
     * @param array $options Options suppl√©mentaires
     * @return string HTML complet avec pr√©view
     */
    public static function render_emoji_selector_with_preview($name, $selected = '', $options = array()) {
        $output = '<div class="sisme-emoji-selector-wrapper">';
        
        // Pr√©visualisation
        $output .= '<div class="sisme-emoji-preview">';
        $output .= '<span class="sisme-emoji-preview-display" id="' . esc_attr($name) . '_preview">';
        $output .= !empty($selected) ? $selected : '‚ùì';
        $output .= '</span>';
        $output .= '<label for="' . esc_attr($name) . '">Pr√©visualisation</label>';
        $output .= '</div>';
        
        // S√©lecteur
        $output .= self::render_emoji_selector($name, $selected, $options);
        
        $output .= '</div>';
        
        // JavaScript pour la pr√©visualisation
        $output .= '<script>
        document.addEventListener("DOMContentLoaded", function() {
            var selector = document.getElementById("' . esc_js($options['id'] ?? $name) . '");
            var preview = document.getElementById("' . esc_js($name) . '_preview");
            
            if (selector && preview) {
                selector.addEventListener("change", function() {
                    var selectedOption = this.options[this.selectedIndex];
                    var emoji = this.value;
                    
                    if (emoji) {
                        preview.textContent = emoji;
                        preview.title = selectedOption.text;
                    } else {
                        preview.textContent = "‚ùì";
                        preview.title = "Aucun √©moji s√©lectionn√©";
                    }
                });
            }
        });
        </script>';
        
        return $output;
    }
    
    /**
     * Valider qu'un √©moji est dans la liste autoris√©e
     * 
     * @param string $emoji √âmoji √† valider
     * @return bool True si valide
     */
    public static function is_valid_emoji($emoji) {
        $all_emojis = self::get_all_emojis();
        return array_key_exists($emoji, $all_emojis);
    }
    
    /**
     * Obtenir la description d'un √©moji
     * 
     * @param string $emoji √âmoji
     * @return string|false Description ou false
     */
    public static function get_emoji_description($emoji) {
        $all_emojis = self::get_all_emojis();
        return isset($all_emojis[$emoji]) ? $all_emojis[$emoji] : false;
    }
    
    /**
     * Suggestions d'√©mojis pour types de contenu gaming
     * 
     * @param string $content_type Type de contenu
     * @return array √âmojis sugg√©r√©s
     */
    public static function get_gaming_suggestions($content_type) {
        $suggestions = array(
            'featured' => array('üíé', 'üåü', 'üëë', 'üèÜ'),
            'new' => array('üÜï', 'üî•', '‚ö°', 'üí•'),
            'action' => array('‚öîÔ∏è', 'üó°Ô∏è', 'üèπ', 'üõ°Ô∏è'),
            'puzzle' => array('üß©', 'üß†', 'üîç', 'üé≤'),
            'simulation' => array('üèóÔ∏è', 'üöú', 'üå±', 'üèòÔ∏è'),
            'sports' => array('‚öΩ', 'üèÄ', 'üèéÔ∏è', 'üèçÔ∏è'),
            'horror' => array('üëª', 'üéÉ', 'üíÄ', 'üßü'),
            'scifi' => array('üöÄ', 'üõ∏', 'üëΩ', 'üåå')
        );
        
        return isset($suggestions[$content_type]) ? $suggestions[$content_type] : array();
    }
    
    /**
     * G√©n√©rer les options CSS pour le style des √©mojis
     * 
     * @return string CSS pour les √©mojis
     */
    public static function get_emoji_css() {
        return '
        .sisme-emoji-selector-wrapper {
            display: flex;
            align-items: center;
            gap: 15px;
            margin: 10px 0;
        }
        
        .sisme-emoji-preview {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 5px;
        }
        
        .sisme-emoji-preview-display {
            font-size: 2rem;
            display: flex;
            align-items: center;
            justify-content: center;
            width: 50px;
            height: 50px;
            border: 2px solid #ddd;
            border-radius: 8px;
            background: #f9f9f9;
            transition: all 0.3s ease;
        }
        
        .sisme-emoji-preview label {
            font-size: 0.8rem;
            color: #666;
            text-align: center;
        }
        
        .sisme-emoji-selector {
            min-width: 300px;
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
        }
        
        .sisme-emoji-selector optgroup {
            font-weight: bold;
            color: #333;
        }
        
        .sisme-emoji-selector option {
            padding: 5px;
            font-weight: normal;
        }
        ';
    }
}

/**
 * üéÆ EXEMPLES D'USAGE DANS VOS FORMULAIRES
 */

/*
// Exemple 1: S√©lecteur simple pour titre de carrousel
echo Sisme_Emoji_Helper::render_emoji_selector('carousel_title_emoji', 'üéÆ');

// Exemple 2: S√©lecteur avec pr√©visualisation
echo Sisme_Emoji_Helper::render_emoji_selector_with_preview(
    'section_emoji', 
    'üíé', 
    array(
        'categories' => array('featured', 'gaming'),
        'class' => 'ma-classe-custom'
    )
);

// Exemple 3: Validation c√¥t√© serveur
if (isset($_POST['emoji']) && Sisme_Emoji_Helper::is_valid_emoji($_POST['emoji'])) {
    $safe_emoji = $_POST['emoji'];
    $description = Sisme_Emoji_Helper::get_emoji_description($safe_emoji);
}

// Exemple 4: Suggestions par type
$action_emojis = Sisme_Emoji_Helper::get_gaming_suggestions('action');
// Retourne: array('‚öîÔ∏è', 'üó°Ô∏è', 'üèπ', 'üõ°Ô∏è')

// Exemple 5: Liste pour un admin
$all_categories = Sisme_Emoji_Helper::get_all_categories();
foreach ($all_categories as $cat_key => $category) {
    echo '<h3>' . $category[Sisme_Utils_Games::KEY_NAME] . '</h3>';
    foreach ($category['emojis'] as $emoji => $desc) {
        echo '<span title="' . $desc . '">' . $emoji . '</span> ';
    }
}
*/

?>