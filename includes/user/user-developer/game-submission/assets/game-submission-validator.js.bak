/**
 * File: /sisme-games-editor/includes/user/user-developer/game-submission/assets/game-submission-validator.js (backup)
 * Validation frontend pour les soumissions de jeux
 * 
 * RESPONSABILITÉ:
 * - Validation temps réel des champs du formulaire
 * - Calcul du pourcentage de completion
 * - Gestion des messages d'erreur
 * - Intégration avec game-submission.js
 * 
 * DÉPENDANCES:
 * - jQuery (WordPress core)
 * - Constantes de champs (Sisme_Utils_Users)
 */

(function($) {
    'use strict';
    
    window.SismeGameSubmissionValidator = window.SismeGameSubmissionValidator || {
        // Règles de validation basées sur les constantes PHP et le formulaire existant
        rules: {
            // Informations principales
            'game_name': {
                required: true,
                minLength: 3,
                maxLength: 100,
                type: 'text'
            },
            'game_description': {
                required: true,
                minLength: 50,
                maxLength: 500,
                type: 'textarea'
            },
            'game_release_date': {
                required: true,
                type: 'date',
                validateDate: true
            },
            'game_trailer': {
                required: true,
                type: 'url',
                isYouTubeUrl: true
            },
            
            // Studio et éditeur
            'game_studio_name': {
                required: true,
                minLength: 2,
                maxLength: 100,
                type: 'text'
            },
            'game_studio_url': {
                required: false,
                type: 'url'
            },
            'game_publisher_name': {
                required: true,
                minLength: 2,
                maxLength: 100,
                type: 'text'
            },
            'game_publisher_url': {
                required: false,
                type: 'url'
            },
            
            // Catégories
            'game_genres[]': {
                required: true,
                type: 'select_multiple',
                minCount: 1,
                maxCount: 5
            },
            'game_platforms[]': {
                required: true,
                type: 'select_multiple',
                minCount: 1,
                maxCount: 10
            },
            'game_modes[]': {
                required: true,
                type: 'select_multiple',
                minCount: 1,
                maxCount: 5
            },
            
            // Médias
            'cover_horizontal': {
                required: true,
                type: 'file',
                accept: 'image/*'
            },
            'cover_vertical': {
                required: true,
                type: 'file',
                accept: 'image/*'
            },
            'screenshots[]': {
                required: true,
                type: 'file_multiple',
                minCount: 2,
                maxCount: 10,
                accept: 'image/*'
            },
            
            // Liens externes (optionnels)
            'external_link_urls[]': {
                required: false,
                type: 'url_array'
            },
            
            // Sections contenu détaillé
            'section_titles[]': {
                required: false,
                minLength: 3,
                maxLength: 100,
                type: 'text_array'
            },
            'section_contents[]': {
                required: false,
                minLength: 10,
                maxLength: 2000,
                type: 'textarea_array'
            }
        },
        
        // Messages d'erreur
        messages: {
            required: 'Ce champ est obligatoire',
            minLength: 'Minimum {min} caractères requis',
            maxLength: 'Maximum {max} caractères autorisés',
            invalidUrl: 'URL invalide',
            invalidEmail: 'Email invalide',
            invalidDate: 'Date invalide',
            invalidYouTube: 'URL YouTube invalide',
            minCount: 'Sélectionnez au moins {min} élément(s)',
            maxCount: 'Maximum {max} éléments autorisés',
            invalidFile: 'Format de fichier invalide',
            fileTooLarge: 'Fichier trop volumineux (max 5MB)',
            custom: {
                'game_description': 'Description trop courte (minimum 50 caractères pour un bon référencement)',
                'game_trailer': 'Veuillez fournir une URL YouTube valide pour votre trailer',
                'game_genres[]': 'Sélectionnez au moins un genre pour votre jeu',
                'game_platforms[]': 'Indiquez sur quelles plateformes votre jeu est disponible',
                'cover_horizontal': 'Image de couverture horizontale requise (1920x1080 recommandé)',
                'cover_vertical': 'Image de couverture verticale requise (600x900 recommandé)',
                'screenshots[]': 'Au moins 2 captures d\'écran sont requises'
            }
        },
        
        // Poids des champs pour le calcul de completion
        fieldWeights: {
            // Informations principales (30%)
            'game_name': 5,
            'game_description': 10,
            'game_release_date': 5,
            'game_trailer': 10,
            
            // Studio/éditeur (15%)
            'game_studio_name': 5,
            'game_publisher_name': 5,
            'game_studio_url': 2.5,
            'game_publisher_url': 2.5,
            
            // Catégories (20%)
            'game_genres[]': 7,
            'game_platforms[]': 7,
            'game_modes[]': 6,
            
            // Médias (25%)
            'cover_horizontal': 8,
            'cover_vertical': 8,
            'screenshots[]': 9,
            
            // Liens externes (5%)
            'external_link_urls[]': 5,
            
            // Contenu détaillé (5%)
            'section_titles[]': 2.5,
            'section_contents[]': 2.5
        },
        
        isInitialized: false,
        lastValidation: {},
        completionPercentage: 0
    };
    
    /**
     * Initialisation du validateur
     */
    SismeGameSubmissionValidator.init = function() {
        if (this.isInitialized) {
            return;
        }
        
        this.bindEvents();
        this.isInitialized = true;
        
        this.log('Validateur de soumissions initialisé');
    };
    
    /**
     * Liaison des événements de validation
     */
    SismeGameSubmissionValidator.bindEvents = function() {
        const formSelector = '#sisme-submit-game-form';
        
        // Validation temps réel sur blur
        $(document).on('blur', formSelector + ' input, ' + formSelector + ' textarea, ' + formSelector + ' select', 
            this.handleFieldValidation.bind(this));
        
        // Validation immediate sur change pour les selects multiples
        $(document).on('change', formSelector + ' select[multiple]', 
            this.handleFieldValidation.bind(this));
        
        // Validation des fichiers sur change
        $(document).on('change', formSelector + ' input[type="file"]', 
            this.handleFileValidation.bind(this));
        
        // Calcul de completion sur input
        $(document).on('input change', formSelector + ' input, ' + formSelector + ' textarea, ' + formSelector + ' select', 
            this.debounce(this.calculateCompletion.bind(this), 500));
    };
    
    /**
     * Gérer la validation d'un champ
     */
    SismeGameSubmissionValidator.handleFieldValidation = function(e) {
        const $field = $(e.target);
        const fieldName = this.getFieldName($field);
        
        if (!fieldName || !this.rules[fieldName]) {
            return;
        }
        
        const result = this.validateField(fieldName, $field);
        this.showFieldFeedback($field, result);
        
        // Mettre à jour la validation globale
        this.lastValidation[fieldName] = result;
        
        // Déclencher un événement personnalisé
        $field.trigger('sisme:field:validated', [fieldName, result]);
    };
    
    /**
     * Gérer la validation des fichiers
     */
    SismeGameSubmissionValidator.handleFileValidation = function(e) {
        const $field = $(e.target);
        const fieldName = this.getFieldName($field);
        const files = e.target.files;
        
        if (!files || files.length === 0) {
            this.clearFieldError($field);
            return;
        }
        
        const result = this.validateFiles(fieldName, files);
        this.showFieldFeedback($field, result);
        
        // Mettre à jour la validation globale
        this.lastValidation[fieldName] = result;
    };
    
    /**
     * Valider un champ spécifique
     */
    SismeGameSubmissionValidator.validateField = function(fieldName, $field) {
        const rule = this.rules[fieldName];
        const value = this.getFieldValue($field);
        
        const result = {
            isValid: true,
            errors: [],
            fieldName: fieldName,
            value: value
        };
        
        // Champ requis
        if (rule.required && this.isEmpty(value)) {
            result.isValid = false;
            result.errors.push(this.getCustomMessage(fieldName) || this.messages.required);
            return result;
        }
        
        // Si le champ est vide et non requis, il est valide
        if (this.isEmpty(value) && !rule.required) {
            return result;
        }
        
        // Validation selon le type
        switch (rule.type) {
            case 'text':
            case 'textarea':
                this.validateText(value, rule, result);
                break;
                
            case 'url':
                this.validateUrl(value, rule, result);
                break;
                
            case 'date':
                this.validateDate(value, rule, result);
                break;
                
            case 'select_multiple':
                this.validateSelectMultiple(value, rule, result);
                break;
                
            case 'text_array':
            case 'textarea_array':
                this.validateTextArray(value, rule, result);
                break;
                
            case 'url_array':
                this.validateUrlArray(value, rule, result);
                break;
        }
        
        return result;
    };
    
    /**
     * Valider les fichiers
     */
    SismeGameSubmissionValidator.validateFiles = function(fieldName, files) {
        const rule = this.rules[fieldName];
        const result = {
            isValid: true,
            errors: [],
            fieldName: fieldName,
            value: files
        };
        
        if (!rule) {
            return result;
        }
        
        // Vérifier le nombre de fichiers
        if (rule.minCount && files.length < rule.minCount) {
            result.isValid = false;
            result.errors.push(this.messages.minCount.replace('{min}', rule.minCount));
        }
        
        if (rule.maxCount && files.length > rule.maxCount) {
            result.isValid = false;
            result.errors.push(this.messages.maxCount.replace('{max}', rule.maxCount));
        }
        
        // Valider chaque fichier
        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            
            // Type de fichier
            if (rule.accept && !this.isValidFileType(file, rule.accept)) {
                result.isValid = false;
                result.errors.push(this.messages.invalidFile);
                break;
            }
            
            // Taille du fichier (5MB max)
            if (file.size > 5 * 1024 * 1024) {
                result.isValid = false;
                result.errors.push(this.messages.fileTooLarge);
                break;
            }
        }
        
        return result;
    };
    
    /**
     * Validation texte
     */
    SismeGameSubmissionValidator.validateText = function(value, rule, result) {
        const textValue = String(value).trim();
        
        if (rule.minLength && textValue.length < rule.minLength) {
            result.isValid = false;
            result.errors.push(this.messages.minLength.replace('{min}', rule.minLength));
        }
        
        if (rule.maxLength && textValue.length > rule.maxLength) {
            result.isValid = false;
            result.errors.push(this.messages.maxLength.replace('{max}', rule.maxLength));
        }
    };
    
    /**
     * Validation URL
     */
    SismeGameSubmissionValidator.validateUrl = function(value, rule, result) {
        const urlPattern = /^https?:\/\/[^\s$.?#].[^\s]*$/i;
        
        if (!urlPattern.test(value)) {
            result.isValid = false;
            result.errors.push(this.messages.invalidUrl);
            return;
        }
        
        // Validation spécifique YouTube
        if (rule.isYouTubeUrl) {
            const youtubePattern = /^https?:\/\/(www\.)?(youtube\.com\/watch\?v=|youtu\.be\/)[a-zA-Z0-9_-]{11}/;
            if (!youtubePattern.test(value)) {
                result.isValid = false;
                result.errors.push(this.messages.invalidYouTube);
            }
        }
    };
    
    /**
     * Validation date
     */
    SismeGameSubmissionValidator.validateDate = function(value, rule, result) {
        const date = new Date(value);
        
        if (isNaN(date.getTime())) {
            result.isValid = false;
            result.errors.push(this.messages.invalidDate);
            return;
        }
        
        // La date ne peut pas être dans le futur de plus de 1 an
        const maxDate = new Date();
        maxDate.setFullYear(maxDate.getFullYear() + 1);
        
        if (date > maxDate) {
            result.isValid = false;
            result.errors.push('Date de sortie trop éloignée');
        }
    };
    
    /**
     * Validation select multiple
     */
    SismeGameSubmissionValidator.validateSelectMultiple = function(value, rule, result) {
        const selectedValues = Array.isArray(value) ? value : (value ? [value] : []);
        
        if (rule.minCount && selectedValues.length < rule.minCount) {
            result.isValid = false;
            result.errors.push(this.messages.minCount.replace('{min}', rule.minCount));
        }
        
        if (rule.maxCount && selectedValues.length > rule.maxCount) {
            result.isValid = false;
            result.errors.push(this.messages.maxCount.replace('{max}', rule.maxCount));
        }
    };
    
    /**
     * Validation tableaux de texte
     */
    SismeGameSubmissionValidator.validateTextArray = function(value, rule, result) {
        if (!Array.isArray(value)) {
            return;
        }
        
        for (let i = 0; i < value.length; i++) {
            const textValue = String(value[i]).trim();
            
            if (textValue && rule.minLength && textValue.length < rule.minLength) {
                result.isValid = false;
                result.errors.push(`Élément ${i + 1}: ` + this.messages.minLength.replace('{min}', rule.minLength));
                break;
            }
            
            if (textValue && rule.maxLength && textValue.length > rule.maxLength) {
                result.isValid = false;
                result.errors.push(`Élément ${i + 1}: ` + this.messages.maxLength.replace('{max}', rule.maxLength));
                break;
            }
        }
    };
    
    /**
     * Validation tableaux d'URLs
     */
    SismeGameSubmissionValidator.validateUrlArray = function(value, rule, result) {
        if (!Array.isArray(value)) {
            return;
        }
        
        const urlPattern = /^https?:\/\/[^\s$.?#].[^\s]*$/i;
        
        for (let i = 0; i < value.length; i++) {
            const url = String(value[i]).trim();
            
            if (url && !urlPattern.test(url)) {
                result.isValid = false;
                result.errors.push(`Lien ${i + 1}: ` + this.messages.invalidUrl);
                break;
            }
        }
    };
    
    /**
     * Calculer le pourcentage de completion
     */
    SismeGameSubmissionValidator.calculateCompletion = function() {
        const $form = $('#sisme-submit-game-form');
        let totalWeight = 0;
        let completedWeight = 0;
        
        // Parcourir tous les champs avec des poids
        Object.keys(this.fieldWeights).forEach(fieldName => {
            const weight = this.fieldWeights[fieldName];
            totalWeight += weight;
            
            const $field = this.findFieldByName($form, fieldName);
            if ($field && $field.length > 0) {
                const value = this.getFieldValue($field);
                
                if (!this.isEmpty(value)) {
                    // Le champ a une valeur, vérifier s'il est valide
                    const validationResult = this.lastValidation[fieldName];
                    
                    if (!validationResult || validationResult.isValid) {
                        completedWeight += weight;
                    } else {
                        // Champ rempli mais invalide = 50% du poids
                        completedWeight += weight * 0.5;
                    }
                }
            }
        });
        
        this.completionPercentage = Math.round((completedWeight / totalWeight) * 100);
        
        // Déclencher un événement pour mettre à jour l'UI
        $form.trigger('sisme:completion:updated', [this.completionPercentage]);
        
        return this.completionPercentage;
    };
    
    /**
     * Valider le formulaire complet
     */
    SismeGameSubmissionValidator.validateForm = function() {
        const $form = $('#sisme-submit-game-form');
        const results = {};
        let isFormValid = true;
        
        // Valider tous les champs avec des règles
        Object.keys(this.rules).forEach(fieldName => {
            const $field = this.findFieldByName($form, fieldName);
            
            if ($field && $field.length > 0) {
                let result;
                
                if ($field.is('input[type="file"]')) {
                    result = this.validateFiles(fieldName, $field[0].files);
                } else {
                    result = this.validateField(fieldName, $field);
                }
                
                results[fieldName] = result;
                
                if (!result.isValid) {
                    isFormValid = false;
                    this.showFieldFeedback($field, result);
                }
            }
        });
        
        // Calculer la completion finale
        this.calculateCompletion();
        
        return {
            isValid: isFormValid,
            completion: this.completionPercentage,
            results: results
        };
    };
    
    /**
     * Obtenir la valeur d'un champ
     */
    SismeGameSubmissionValidator.getFieldValue = function($field) {
        if ($field.is('select[multiple]')) {
            return $field.val() || [];
        } else if ($field.is('input[type="checkbox"]')) {
            return $field.is(':checked') ? $field.val() : '';
        } else if ($field.is('input[type="radio"]')) {
            return $field.is(':checked') ? $field.val() : '';
        } else {
            return $field.val() || '';
        }
    };
    
    /**
     * Obtenir le nom du champ pour la validation
     */
    SismeGameSubmissionValidator.getFieldName = function($field) {
        let name = $field.attr('name');
        
        // Normaliser les noms avec []
        if (name && name.endsWith('[]')) {
            return name;
        }
        
        // Pour les champs multiples sans [], ajouter []
        if ($field.is('select[multiple]') && name && !name.endsWith('[]')) {
            return name + '[]';
        }
        
        return name;
    };
    
    /**
     * Trouver un champ par son nom
     */
    SismeGameSubmissionValidator.findFieldByName = function($form, fieldName) {
        // Essayer d'abord le nom exact
        let $field = $form.find('[name="' + fieldName + '"]');
        
        // Si pas trouvé et que le nom se termine par [], essayer sans
        if ($field.length === 0 && fieldName.endsWith('[]')) {
            const nameWithoutBrackets = fieldName.slice(0, -2);
            $field = $form.find('[name="' + nameWithoutBrackets + '"]');
        }
        
        return $field;
    };
    
    /**
     * Vérifier si une valeur est vide
     */
    SismeGameSubmissionValidator.isEmpty = function(value) {
        if (value === null || value === undefined) {
            return true;
        }
        
        if (Array.isArray(value)) {
            return value.length === 0;
        }
        
        if (typeof value === 'string') {
            return value.trim().length === 0;
        }
        
        return false;
    };
    
    /**
     * Vérifier le type de fichier
     */
    SismeGameSubmissionValidator.isValidFileType = function(file, acceptPattern) {
        if (acceptPattern === 'image/*') {
            return file.type.startsWith('image/');
        }
        
        return true; // Simplification pour l'instant
    };
    
    /**
     * Obtenir un message personnalisé
     */
    SismeGameSubmissionValidator.getCustomMessage = function(fieldName) {
        return this.messages.custom[fieldName] || null;
    };
    
    /**
     * Afficher le feedback d'un champ
     */
    SismeGameSubmissionValidator.showFieldFeedback = function($field, result) {
        if (result.isValid) {
            this.clearFieldError($field);
            this.showFieldSuccess($field);
        } else {
            this.showFieldError($field, result.errors[0]); // Afficher la première erreur
        }
    };
    
    /**
     * Afficher une erreur sur un champ
     */
    SismeGameSubmissionValidator.showFieldError = function($field, message) {
        $field.addClass('sisme-field-error').removeClass('sisme-field-success');
        
        // Chercher ou créer le conteneur d'erreur
        let $errorContainer = $field.siblings('.sisme-field-error-message');
        
        if ($errorContainer.length === 0) {
            $errorContainer = $('<div class="sisme-field-error-message"></div>');
            $field.after($errorContainer);
        }
        
        $errorContainer.text(message).show();
    };
    
    /**
     * Afficher le succès sur un champ
     */
    SismeGameSubmissionValidator.showFieldSuccess = function($field) {
        $field.addClass('sisme-field-success').removeClass('sisme-field-error');
    };
    
    /**
     * Effacer l'erreur d'un champ
     */
    SismeGameSubmissionValidator.clearFieldError = function($field) {
        $field.removeClass('sisme-field-error sisme-field-success');
        $field.siblings('.sisme-field-error-message').hide();
    };
    
    /**
     * Debounce utility
     */
    SismeGameSubmissionValidator.debounce = function(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    };
    
    /**
     * Log de débogage
     */
    SismeGameSubmissionValidator.log = function(message, data = null) {
        if (typeof console !== 'undefined' && console.log) {
            console.log('[SismeGameSubmissionValidator] ' + message, data || '');
        }
    };
    
    // Initialisation automatique
    $(document).ready(() => {
        SismeGameSubmissionValidator.init();
    });
    
})(jQuery);